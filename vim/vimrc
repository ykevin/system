runtime! debian.vim

if(has("win32") || has("win95") || has("win64") || has("win16")) "判定当前操作系统类型
	let g:iswindows=1
else
	let g:iswindows=0
endif
	set nocompatible "不要vim模仿vi模式，建议设置，否则会有很多不兼容的问题
syntax on"打开高亮
if has("autocmd")
	filetype plugin indent on "根据文件进行缩进
	augroup vimrcEx
		au!
		autocmd FileType text setlocal textwidth=78
		autocmd BufReadPost *
			\ if line("'\"") > 1 && line("'\"") <= line("$") |
			\ exe "normal! g`\"" |
			\ endif
		augroup END
else
"智能缩进，相应的有cindent，官方说autoindent可以支持各种文件的缩进，但是效果会比只支持C/C++的cindent效果会差一点，但笔者并没有看出来
	set autoindent " always set autoindenting on 
endif " has("autocmd")
set tabstop=4 "让一个tab等于4个空格
set vb t_vb=
set number
"set nowrap "不自动换行
set hlsearch "高亮显示结果
set cindent shiftwidth=4
set incsearch "在输入要搜索的文字时，vim会实时匹配
set backspace=indent,eol,start whichwrap+=<,>,[,] "允许退格键的使用
set pastetoggle=<F9>
if(g:iswindows==1) "允许鼠标的使用
	"防止linux终端下无法拷贝
	if has('mouse')
		set mouse=a
	endif
	au GUIEnter * simalt ~x
endif
"字体的设置
set guifont=Bitstream_Vera_Sans_Mono:h9:cANSI "记住空格用下划线代替哦
set gfw=幼圆:h10:cGB2312`'")"'))"

map <F12> :call Do_CsTag()<CR>
nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>:copen<CR>
nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>:copen<CR>
nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>:copen<CR>
function Do_CsTag()
	let dir = getcwd()
		if filereadable("tags")
			if(g:iswindows==1)
			let tagsdeleted=delete(dir."\\"."tags")
		else
			let tagsdeleted=delete("./"."tags")
		endif
			if(tagsdeleted!=0)
				echohl WarningMsg | echo "Fail to do tags! I cannot delete the tags" | echohl None
				return
			endif
		endif
		if has("cscope")
			silent! execute "cs kill -1"
		endif
		if filereadable("cscope.files")
			if(g:iswindows==1)
				let csfilesdeleted=delete(dir."\\"."cscope.files")
			else
				let csfilesdeleted=delete("./"."cscope.files")
			endif
			if(csfilesdeleted!=0)
				echohl WarningMsg | echo "Fail to do cscope! I cannot delete the cscope.files" | echohl None
				return
			endif
		endif
		if filereadable("cscope.out")
			if(g:iswindows==1)
				let csoutdeleted=delete(dir."\\"."cscope.out")
			else
				let csoutdeleted=delete("./"."cscope.out")
			endif
				if(csoutdeleted!=0)
					echohl WarningMsg | echo "Fail to do cscope! I cannot delete the cscope.out" | echohl None
					return
				endif
			endif
		if(executable('ctags'))
			"silent!
			"execute
			""!ctags -R --c-types=+p --fields=+S *"
			silent! execute "!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q ."
		endif
		if(executable('cscope') && has("cscope") )
			if(g:iswindows!=1)
				silent! execute "!find . -name '*.h' -o -name '*.c' -o -name '*.cpp' -o -name '*.java' -o -name '*.cs' > cscope.files"
			else
				silent! execute "!dir /s/b *.c,*.cpp,*.h,*.java,*.cs >> cscope.files"
			endif
			silent! execute "!cscope -b"
			execute "normal :"
		if filereadable("cscope.out")
			execute "cs add cscope.out"
		endif
	endif
endfunction

nmap <F9> :TagbarToggle<CR>
"nmap <Leader>tb :TagbarToggle<CR>      "快捷键设置
let g:tagbar_ctags_bin='ctags'          "ctags程序的路径
let g:tagbar_width=30                   "窗口宽度的设置
let g:pydiction_location = '~/.vim/bundle/pydiction/complete-dict'
set ai
set et
"autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen() "如果是c语言的程序的话，tagbar自动开启

" NERDTree
map <F10> :NERDTreeToggle<CR>
let NERDTreeWinPos='left'
let NERDTreeWinSize=25

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
		source /etc/vim/vimrc.local
endif

"if filereadable(expand("/etc/vim/vimrc.bundles"))
"	source /etc/vim/vimrc.bundles
"endif


set nocompatible              " be iMproved
filetype off                  " required!

execute pathogen#infect()
syntax on
filetype plugin indent on

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required! 
" Bundle 'gmarik/vundle'

" 可以通过以下四种方式指定插件的来源
" a) 指定Github中vim-scripts仓库中的插件，直接指定插件名称即可，插件明中的空格使用“-”代替。
Bundle 'L9'

" b) 指定Github中其他用户仓库的插件，使用“用户名/插件名称”的方式指定
Bundle 'tpope/vim-fugitive'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'tpope/vim-rails.git'
Bundle 'stevearc/vim-arduino'
Bundle 'scrooloose/nerdtree'
Bundle 'majutsushi/tagbar'
Bundle 'rkulla/pydiction'

" c) 指定非Github的Git仓库的插件，需要使用git地址
"Bundle 'git://git.wincent.com/command-t.git'

" d) 指定本地Git仓库中的插件
"Bundle 'file:///Users/gmarik/path/to/plugin'


":BundleList             -列举列表(也就是.vimrc)中配置的所有插件
":BundleInstall         -安装列表中的全部插件
":BundleInstall!        -更新列表中的全部插件
":BundleSearch foo   	-查找foo插件
":BundleSearch! foo  	-刷新foo插件缓存
":BundleClean           -清除列表中没有的插件
":BundleClean!          -清除列表中没有的插件


